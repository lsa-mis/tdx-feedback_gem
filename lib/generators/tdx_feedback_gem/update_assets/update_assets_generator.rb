# frozen_string_literal: true

require 'rails/generators'
require 'fileutils'

module TdxFeedbackGem
  module Generators
    # Updates front-end asset copies in the host app (SCSS partial & Stimulus controller)
    # Use when upgrading the gem and you want the latest styles or JS.
    # Run: rails g tdx_feedback_gem:update_assets
    class UpdateAssetsGenerator < Rails::Generators::Base
      source_root File.expand_path('../install/templates', __dir__)

      class_option :force, type: :boolean, default: false, desc: 'Overwrite existing files without prompt'

      def update_scss_partial
        return unless host_app_uses_scss?

        scss_source = TdxFeedbackGem::Engine.root.join('app', 'assets', 'stylesheets', '_tdx_feedback_gem.scss')
        css_source  = TdxFeedbackGem::Engine.root.join('app', 'assets', 'stylesheets', 'tdx_feedback_gem.css')
        scss_dest   = Rails.root.join('app', 'assets', 'stylesheets', '_tdx_feedback_gem.scss')

        chosen_source = File.exist?(scss_source) ? scss_source : css_source
        content = File.read(chosen_source)
        banner = "/**\n * AUTOGENERATED by tdx_feedback_gem:update_assets on #{Time.now.utc}\n * If you've customized this file, re-apply your changes after regeneration.\n */\n\n"

        write_file_with_banner(scss_dest, banner + content)
      end

      def update_stimulus_controller
        controller_source = TdxFeedbackGem::Engine.root.join('app', 'javascript', 'controllers', 'tdx_feedback_controller.js')
        return unless File.exist?(controller_source)

        dest_dir = Rails.root.join('app', 'javascript', 'controllers')
        FileUtils.mkdir_p(dest_dir)
        controller_dest = dest_dir.join('tdx_feedback_controller.js')

        content = File.read(controller_source)
        banner = "// AUTOGENERATED by tdx_feedback_gem:update_assets on #{Time.now.utc}\n// If you've customized this file, re-apply your changes after regeneration.\n\n"

        write_file_with_banner(controller_dest, banner + content)
      end

      def completion_message
        say "\nâœ… Assets updated. Review changes & recompile your assets if needed.\n"
      end

      private

      def host_app_uses_scss?
        Dir.glob(Rails.root.join('app', 'assets', 'stylesheets', '*.{scss,sass}')).any?
      end

      def write_file_with_banner(path, content)
        if File.exist?(path) && !options[:force]
          existing = File.read(path)
          return if existing == content # no change
          say_status :skip, "#{relative_path(path)} (use --force to overwrite)", :yellow
        else
          File.write(path, content)
          say_status :create, relative_path(path), :green
        end
      end

      def relative_path(path)
        Pathname.new(path).relative_path_from(Rails.root).to_s
      end
    end
  end
end
